diff --git a/libhardware/include/hardware/keymaster1.h b/libhardware/include/hardware/keymaster1.h
index afd202c..63a38f6 100644
--- a/libhardware/include/hardware/keymaster1.h
+++ b/libhardware/include/hardware/keymaster1.h
@@ -530,6 +530,46 @@ struct keymaster1_device {
      */
     keymaster_error_t (*abort)(const struct keymaster1_device* dev,
                                keymaster_operation_handle_t operation_handle);
+
+    /** below is for wechat SOTER **/
+    /**
+     * Generates a pair of ATTK defined in SOTER. Save the private key into RPMB and export the public key in
+     * X.509v3 format. Note that the ATTK generated will never be touched outside the key master.
+     * \param[in] dev The keymaster device structure.
+     * \param[in] copy_num The number of copies that will be saved in the RPMB. E.g. the ATTK generated will
+     * be saved twice if the copy_num is 1.
+     */
+    keymaster_error_t (*generate_attk_key_pair)(const struct keymaster1_device* dev, const uint8_t copy_num);
+
+    /**
+     * Verify the existance ATTK defined in SOTER.
+     * \param[in] dev The keymaster device structure.
+     * Returns: 0 if the ATTK exists.
+     */
+    keymaster_error_t (*verify_attk_key_pair)(const struct keymaster1_device* dev);
+
+    /**
+     * Export the public key of ATTK in X.509v3 format.
+     * \param[in] dev The keymaster device structure.
+     * \param[out] pub_key_data The public key data with X.509v3 format
+     * \param[out] pub_key_data_length The length of the public key data.
+     */
+    keymaster_error_t (*export_attk_public_key)(const struct keymaster1_device* dev, const uint8_t* pub_key_data, const size_t pub_key_data_length);
+
+    /**
+     * Get the unique id.
+     * \param[out] device_id the device id data.
+     * unique_id The unique id for each device, format as below:
+     * 1.bytes 0-3: Identify each silicon provider id, defined by WeChat
+     * 2.bytes 4-7: SoC model ID, defined by each silicon provider (like Qualcomm and Trustonic)
+     * 3.bytes 8-15: Public Chip Serial *Number of SoC, defined by each silicon provider
+     * e.g 090000006795000012706b461410496b
+     * We can use 09 to identify MTK *or QC ... etc. chips.
+     * Use 6795 to identify different model
+     * Use CSN to identify each device.
+     * \prama[out] device_id_length the length of the device_id
+     */
+    keymaster_error_t (*get_device_id)(const struct keymaster1_device* dev, const uint8_t* device_id, const size_t device_id_length);
 };
 typedef struct keymaster1_device keymaster1_device_t;
 
diff --git a/libhardware/include/hardware/keymaster_defs.h b/libhardware/include/hardware/keymaster_defs.h
index 5be956d..dcaf418 100644
--- a/libhardware/include/hardware/keymaster_defs.h
+++ b/libhardware/include/hardware/keymaster_defs.h
@@ -124,6 +124,34 @@ typedef enum {
                                                  authentication has been performed.  Structure
                                                  defined in hw_auth_token_t in hw_auth_token.h. */
     KM_TAG_MAC_LENGTH = KM_UINT | 1003,       /* MAC or AEAD authentication tag length in bits. */
+
+    /*
+     * Below for soter usage
+     */
+    //所生成的密钥是否为 SOTER 方案使用
+    KM_TAG_SOTER_IS_FROM_SOTER = KM_BOOL | 11000,
+    //当公钥从 TEE 中取出时,是否应该在密钥后缀上使用 ATTK[pri] 对此公钥的签名
+    KM_TAG_SOTER_IS_AUTO_SIGNED_WITH_ATTK_WHEN_GET_PUBLIC_KEY = KM_BOOL | 11001,
+    //当公钥从 TEE 中取出时,是否应该在密钥后缀上使用所指定的密钥对的私钥对此公钥的签名
+    KM_TAG_SOTER_IS_AUTO_SIGNED_WITH_COMMON_KEY_WHEN_GET_PUBLIC_KEY = KM_BOOL | 11002,
+    //KM_TAG_SOTER_IS_AUTO_SIGNED_WITH_COMMON_KEY_WHEN_GET_PUBLIC_KEY 所用来签名的密钥对的 keyName
+    KM_TAG_SOTER_AUTO_SIGNED_COMMON_KEY_WHEN_GET_PUBLIC_KEY = KM_BYTES | 11003,
+    //当公钥从 TEE 中取出时,是否应该在公钥后缀上 counter (注,如果和
+    //KM_TAG_SOTER_IS_AUTO_SIGNED_WITH_ATTK_WHEN_GET_PUBLIC_KEY或
+    //KM_TAG_SOTER_IS_AUTO_SIGNED_WITH_COMMON_KEY_WHEN_GET_PUBLIC_KEY同时存在时,
+    //应该同时反映在签名串)
+    KM_TAG_SOTER_AUTO_ADD_COUNTER_WHEN_GET_PUBLIC_KEY = KM_BOOL | 11004,
+    //在签名时,是否同时附上 secmsg (TEE_Name, TEE_Version,
+    //Fingerprint_Sensor_Name, Fingerprint_Sensor_Version)、fingerprint_id 以及
+    //counter,同时反映在签名串
+    KM_TAG_SOTER_IS_SECMSG_FID_COUNTER_SIGNED_WHEN_SIGN = KM_BOOL | 11005,
+    //已经废置,仅作保留
+    KM_TAG_SOTER_USE_NEXT_ATTK = KM_BOOL | 11006,
+    //应用程序的 UID
+    KM_TAG_SOTER_UID = KM_UINT | 11007,
+    //KM_TAG_SOTER_IS_AUTO_SIGNED_WITH_COMMON_KEY_WHEN_GET_PUBLIC_KEY 所用来签名
+    //的密钥对的 keyBlob (保留,待有需要的厂商使用)
+    KM_TAG_SOTER_AUTO_SIGNED_COMMON_KEY_WHEN_GET_PUBLIC_KEY_BLOB = KM_BYTES | 11008,
 } keymaster_tag_t;
 
 /**
